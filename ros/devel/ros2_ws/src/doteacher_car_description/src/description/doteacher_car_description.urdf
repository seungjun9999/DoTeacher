<?xml version="1.0"?>
<robot name="doteacher_car" xmlns:xacro="http://ros.org/wiki/xacro">

    <!-- Define robot constants -->
    <xacro:property name="base_width" value="0.125" />
    <xacro:property name="base_length" value="0.29" />
    <xacro:property name="base_height" value="0.21" />

    <xacro:property name="base_collision_width" value="0.082" />
    <xacro:property name="base_collision_length" value="0.29" />
    <xacro:property name="base_collision_height" value="0.19" />
    <!-- <xacro:property name="base_collision_height" value="0.21" /> -->

    <xacro:property name="wheel_radius" value="0.0325" />
    <xacro:property name="wheel_width" value="0.027" />
    <xacro:property name="wheel_ygap" value="0.02" />

    <xacro:property name="wheel_zoff" value="0.01" />
    <!-- <xacro:property name="wheel_zoff" value="0.02" /> -->
    <xacro:property name="wheel_drive_xoff" value="0.102" />
    <xacro:property name="wheel_steer_xoff" value="0.035" />

    <!-- Define intertial property macros  -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}" />
            <mass value="${m}" />
            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}"
                iyz="0.0" izz="${(m/12) * (w*w + h*h)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
            <mass value="${m}" />
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0" iyy="${(m/12) * (3*r*r + h*h)}"
                iyz="0" izz="${(m/2) * (r*r)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}"
                iyz="0.0" izz="${(2/5) * m * (r*r)}" />
        </inertial>
    </xacro:macro>

    <!-- Robot Base -->
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}" />
            </geometry>
            <material name="Cyan">
                <color rgba="0 1.0 1.0 1.0" />
            </material>
        </visual>

        <collision>
            <geometry>
                <box size="${base_collision_length} ${base_collision_width} ${base_height}" />
            </geometry>
        </collision>

        <xacro:box_inertia m="15" w="${base_collision_width}" d="${base_collision_length}"
            h="${base_collision_height}" />
    </link>

    <!-- Robot Footprint -->
    <link name="base_footprint" />

    <joint name="base_joint" type="fixed">
        <parent link="base_link" />
        <child link="base_footprint" />
        <origin xyz="0.0 0.0 ${-(base_height/2+wheel_radius-wheel_zoff)}" rpy="0 0 0" />
    </joint>

    <!-- Drive Wheels -->
    <xacro:macro name="wheel_drive" params="prefix x_reflect y_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}" />
                </geometry>
                <material name="Gray">
                    <color rgba="0.5 0.5 0.5 1.0" />
                </material>
            </visual>

            <collision>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}" />
                </geometry>
            </collision>

            <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}" />
        </link>

        <joint name="${prefix}_joint" type="continuous">
            <parent link="base_link" />
            <child link="${prefix}_link" />
            <origin
                xyz="${x_reflect*wheel_drive_xoff} ${y_reflect*(base_collision_width/2+wheel_ygap)} ${-(base_collision_height/2-wheel_zoff)}"
                rpy="0 0 0" />
            <axis xyz="0 1 0" />
        </joint>
    </xacro:macro>

    <!-- Steer Wheels -->
    <xacro:macro name="wheel_steer" params="prefix x_reflect y_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}" />
                </geometry>
                <material name="Gray">
                    <color rgba="0.5 0.5 0.5 1.0" />
                </material>
            </visual>

            <collision>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}" />
                </geometry>
            </collision>

            <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}" />
        </link>

        <joint name="${prefix}_joint" type="continuous">
            <parent link="base_link" />
            <child link="${prefix}_link" />
            <origin
                xyz="${x_reflect*wheel_steer_xoff} ${y_reflect*(base_collision_width/2+wheel_ygap)} ${-(base_collision_height/2-wheel_zoff)}"
                rpy="0 0 0" />
            <axis xyz="0 1 0" />
        </joint>
    </xacro:macro>

    <xacro:wheel_drive prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
    <xacro:wheel_drive prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

    <xacro:wheel_steer prefix="steerwhl_l" x_reflect="1" y_reflect="1" />
    <xacro:wheel_steer prefix="steerwhl_r" x_reflect="1" y_reflect="-1" />

    <gazebo>
        <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
            <ros>
                <namespace>/demo</namespace>
            </ros>

            <!-- wheels -->
            <left_joint>drivewhl_l_joint</left_joint>
            <right_joint>drivewhl_r_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>0.125</wheel_separation>
            <wheel_diameter>0.065</wheel_diameter>

            <!-- limits -->
            <max_wheel_torque>20</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>

            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>false</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>

            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>
        </plugin>
    </gazebo>

    <link name="lidar_link">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <mass value="0.178" />
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001" />
        </inertial>

        <!-- <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <cylinder radius="0.03435" length="0.0414" />
            </geometry>
        </collision> -->

        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <cylinder radius="0.03435" length="0.0414" />
            </geometry>
        </visual>
    </link>

    <joint name="lidar_joint" type="fixed">
        <parent link="base_link" />
        <child link="lidar_link" />
        <origin xyz="0.05 0 ${0.22-(base_height/2)}" rpy="0 0 0" />
        <!-- <origin xyz="0.05 0 ${0.195-(base_height/2)}" rpy="0 0 0" /> -->
    </joint>

    <gazebo reference="lidar_link">
        <sensor name="lidar" type="ray">
            <always_on>true</always_on>
            <visualize>true</visualize>
            <update_rate>5</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>360</samples>
                        <resolution>0.500000</resolution>
                        <min_angle>0.000000</min_angle>
                        <max_angle>6.280000</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.120000</min>
                    <max>10</max>
                    <resolution>0.015000</resolution>
                </range>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.01</stddev>
                </noise>
            </ray>
            <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                    <remapping>~/out:=scan</remapping>
                </ros>
                <output_type>sensor_msgs/LaserScan</output_type>
                <frame_name>lidar_link</frame_name>
            </plugin>
        </sensor>
    </gazebo>

    <!-- <link name="camera_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <box size="0.015 0.130 0.022" />
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <box size="0.015 0.130 0.022" />
            </geometry>
        </collision>

        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <mass value="0.035" />
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001" />
        </inertial>
    </link>

    <joint name="camera_joint" type="fixed">
        <parent link="base_link" />
        <child link="camera_link" />
        <origin xyz="0.215 0 0.05" rpy="0 0 0" />
    </joint>

    <link name="camera_depth_frame" />

    <joint name="camera_depth_joint" type="fixed">
        <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}" />
        <parent link="camera_link" />
        <child link="camera_depth_frame" />
    </joint>

    <gazebo reference="camera_link">
        <sensor name="depth_camera" type="depth">
            <visualize>true</visualize>
            <update_rate>30.0</update_rate>
            <camera name="camera">
                <horizontal_fov>1.047198</horizontal_fov>
                <image>
                    <width>640</width>
                    <height>480</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.05</near>
                    <far>3</far>
                </clip>
            </camera>
            <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
                <baseline>0.2</baseline>
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <frame_name>camera_depth_frame</frame_name>
                <pointCloudCutoff>0.5</pointCloudCutoff>
                <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
                <distortionK1>0</distortionK1>
                <distortionK2>0</distortionK2>
                <distortionK3>0</distortionK3>
                <distortionT1>0</distortionT1>
                <distortionT2>0</distortionT2>
                <CxPrime>0</CxPrime>
                <Cx>0</Cx>
                <Cy>0</Cy>
                <focalLength>0</focalLength>
                <hackBaseline>0</hackBaseline>
            </plugin>
        </sensor>
    </gazebo> -->
</robot>